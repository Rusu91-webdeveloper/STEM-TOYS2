generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  password            String
  role                Role                 @default(CUSTOMER)
  emailVerified       DateTime?
  verificationToken   String?
  isActive            Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  addresses           Address[]
  blogs               Blog[]
  passwordResetTokens PasswordResetToken[]
  paymentCards        PaymentCard[]
  wishlistItems       Wishlist[]
  orders              Order[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@index([email])
  @@index([token])
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  name         String
  fullName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String
  isDefault    Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
}

model PaymentCard {
  id                String   @id @default(cuid())
  userId            String
  cardholderName    String
  lastFourDigits    String
  encryptedCardData String
  encryptedCvv      String?
  expiryMonth       String
  expiryYear        String
  cardType          String
  billingAddressId  String?
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  parentId    String?
  image       String?
  isActive    Boolean    @default(true)
  blogs       Blog[]
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
}

model Product {
  id             String      @id @default(cuid())
  name           String
  slug           String      @unique
  description    String
  price          Float
  compareAtPrice Float?
  images         String[]
  categoryId     String
  tags           String[]
  attributes     Json?
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  barcode        String?
  dimensions     Json?
  metadata       Json?
  sku            String?
  stockQuantity  Int         @default(0)
  weight         Float?
  featured       Boolean     @default(false)
  category       Category    @relation(fields: [categoryId], references: [id])
  wishlistItems  Wishlist[]
  orderItems     OrderItem[]

  @@index([categoryId])
  @@index([isActive])
  @@index([featured])
  @@index([slug])
  @@index([name])
  @@index([price])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Blog {
  id           String       @id @default(cuid())
  title        String
  slug         String       @unique
  excerpt      String
  content      String
  coverImage   String?
  categoryId   String
  authorId     String
  tags         String[]
  metadata     Json?
  isPublished  Boolean      @default(false)
  publishedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  readingTime  Int?
  stemCategory StemCategory @default(GENERAL)
  author       User         @relation(fields: [authorId], references: [id])
  category     Category     @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@index([authorId])
  @@index([stemCategory])
}

model Book {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  author      String
  description String
  price       Float      @default(50)
  coverImage  String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  metadata    Json? // For SEO and additional book information
  languages   Language[]
}

model Language {
  id          String  @id @default(cuid())
  name        String
  code        String  @unique
  bookId      String
  isAvailable Boolean @default(true)
  book        Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([bookId])
}

model Order {
  id                String        @id @default(cuid())
  orderNumber       String        @unique
  userId            String
  total             Float
  subtotal          Float
  tax               Float
  shippingCost      Float
  status            OrderStatus   @default(PROCESSING)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     String
  notes             String?
  shippingAddressId String
  billingAddressId  String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  items             OrderItem[]
  user              User          @relation(fields: [userId], references: [id])
  shippingAddress   Address       @relation(fields: [shippingAddressId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([orderNumber])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  name      String
  price     Float
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model StoreSettings {
  id               String   @id @default(cuid())
  storeName        String   @default("TechTots")
  storeUrl         String   @default("https://techtots.com")
  storeDescription String   @default("TechTots is a premier online destination for STEM toys that inspire learning through play.")
  contactEmail     String   @default("info@techtots.com")
  contactPhone     String   @default("+1 (555) 123-4567")
  currency         String   @default("usd")
  timezone         String   @default("america-new_york")
  dateFormat       String   @default("mm-dd-yyyy")
  weightUnit       String   @default("lb")
  metaTitle        String   @default("TechTots | STEM Toys for Curious Minds")
  metaDescription  String   @default("Discover the best STEM toys for curious minds at TechTots. Educational toys that make learning fun for children of all ages.")
  metaKeywords     String   @default("STEM toys, educational toys, science toys, technology toys, engineering toys, math toys")
  shippingSettings Json?
  paymentSettings  Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
}

enum StemCategory {
  SCIENCE
  TECHNOLOGY
  ENGINEERING
  MATHEMATICS
  GENERAL
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
