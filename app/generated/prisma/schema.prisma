// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String               @unique
  password            String
  role                Role                 @default(CUSTOMER)
  emailVerified       DateTime?
  verificationToken   String?
  isActive            Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  addresses           Address[]
  paymentCards        PaymentCard[]
  blogs               Blog[] // Relation to blogs authored by this user
  passwordResetTokens PasswordResetToken[] // Relation to password reset tokens
}

enum Role {
  CUSTOMER
  ADMIN
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
  @@index([token])
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  fullName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String
  isDefault    Boolean @default(false)
}

model PaymentCard {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardholderName    String
  // Only store last 4 digits of card number for display/reference
  lastFourDigits    String
  // Store encrypted card data (these fields should be encrypted at the application level)
  encryptedCardData String // Stores encrypted full card number
  encryptedCvv      String? // Stores encrypted CVV (optional as we may not need to store it)
  expiryMonth       String
  expiryYear        String
  cardType          String // visa, mastercard, amex, discover
  billingAddressId  String? // Optional reference to an address
  isDefault         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  image       String?
  isActive    Boolean    @default(true)
  products    Product[]
  blogs       Blog[] // Relation to blogs in this category
}

model Product {
  id             String   @id @default(cuid())
  name           String
  slug           String   @unique
  description    String
  price          Float
  compareAtPrice Float?
  images         String[]
  categoryId     String
  category       Category @relation(fields: [categoryId], references: [id])
  tags           String[]
  attributes     Json?
  metadata       Json? // SEO metadata and other structured data
  isActive       Boolean  @default(true)
  stockQuantity  Int      @default(0)
  weight         Float? // Weight in kg
  dimensions     Json? // JSON object with width, height, depth
  sku            String? // Stock Keeping Unit
  barcode        String? // UPC, EAN, ISBN, etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Blog {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String
  content     String
  coverImage  String?
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  tags        String[]
  metadata    Json? // SEO metadata and other structured data
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([categoryId])
  @@index([authorId])
}
