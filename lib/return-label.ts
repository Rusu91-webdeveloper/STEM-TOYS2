import PDFDocument from "pdfkit";

interface ReturnLabelProps {
  orderId: string;
  orderNumber: string;
  returnId: string;
  productName: string;
  productId: string;
  productSku: string | null;
  reason: string;
  customerName: string;
  customerEmail: string;
}

/**
 * Generate a return shipping label as a PDF buffer
 */
export async function generateReturnLabel(
  labelData: ReturnLabelProps
): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      // Create a new PDF document
      const doc = new PDFDocument({
        size: "A4",
        margin: 50,
        info: {
          Title: `TechTots Return Label - Order ${labelData.orderNumber}`,
          Author: "TechTots STEM Store",
        },
      });

      // Store PDF data chunks in an array
      const chunks: Buffer[] = [];
      doc.on("data", (chunk: Buffer) => chunks.push(chunk));
      doc.on("end", () => resolve(Buffer.concat(chunks)));
      doc.on("error", reject);

      // Add logo
      // doc.image('public/TechTots_LOGO.png', 50, 50, { width: 150 });

      // Add title
      doc
        .fontSize(20)
        .font("Helvetica-Bold")
        .text("RETURN SHIPPING LABEL", { align: "center" });

      doc.moveDown();

      // Barcode placeholder (in a real implementation, you'd generate an actual barcode)
      doc.rect(50, doc.y, 500, 80).lineWidth(1).stroke();
      doc
        .fontSize(12)
        .font("Courier")
        .text(
          `RMA: ${labelData.returnId.slice(-8).toUpperCase()}`,
          doc.x + 20,
          doc.y - 60,
          { align: "center" }
        );

      doc.moveDown(4);

      // Return details section
      doc.fontSize(14).font("Helvetica-Bold").text("Return Details");

      doc
        .fontSize(10)
        .font("Helvetica")
        .text(`Order Number: ${labelData.orderNumber}`)
        .text(`Return ID: ${labelData.returnId}`)
        .text(`Product: ${labelData.productName}`)
        .text(`SKU: ${labelData.productSku || "N/A"}`)
        .text(`Reason: ${labelData.reason}`);

      doc.moveDown();

      // Shipping instruction
      doc.fontSize(14).font("Helvetica-Bold").text("Shipping Instructions");

      doc
        .fontSize(10)
        .font("Helvetica")
        .text(
          "1. Cut along the dotted line and attach this label to your package."
        )
        .text(
          "2. Drop off the package at any postal office or courier service."
        )
        .text("3. Keep your tracking information for reference.");

      doc.moveDown();

      // Addressee information
      doc.fontSize(14).font("Helvetica-Bold").text("Return Address");

      doc
        .rect(50, doc.y + 10, 500, 100)
        .lineWidth(1)
        .stroke();

      doc
        .fontSize(12)
        .font("Helvetica-Bold")
        .text("TO: TechTots Headquarters", 70, doc.y + 25);

      doc
        .fontSize(10)
        .font("Helvetica")
        .text("Mehedinti 54-56, Bl D5, sc 2, apt 70", 70)
        .text("Cluj-Napoca, Cluj, Romania", 70)
        .text(
          "Reference: RMA " + labelData.returnId.slice(-8).toUpperCase(),
          70
        );

      doc.moveDown(6);

      // Customer information
      doc
        .fontSize(10)
        .font("Helvetica")
        .text(`From: ${labelData.customerName}`, { align: "right" })
        .text(`Email: ${labelData.customerEmail}`, { align: "right" });

      doc.moveDown();

      // Footer
      doc
        .fontSize(8)
        .text(
          "This return label was automatically generated by TechTots Return System.",
          {
            align: "center",
          }
        )
        .text(
          "For questions about your return, please contact support@techtots.com",
          {
            align: "center",
          }
        );

      // End the document
      doc.end();
    } catch (error) {
      reject(error);
    }
  });
}
